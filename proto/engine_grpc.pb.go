// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/engine.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Engine_Init_FullMethodName     = "/proto.Engine/Init"
	Engine_Run_FullMethodName      = "/proto.Engine/Run"
	Engine_Shutdown_FullMethodName = "/proto.Engine/Shutdown"
)

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineClient interface {
	// Initializes the engine with the provided request parameters.
	// Returns a stream of InitResponse messages.
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InitResponse], error)
	// Runs a command with the provided request parameters.
	// Returns a stream of RunResponse messages.
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunResponse], error)
	// Shuts down the engine with the provided request parameters.
	// Returns a stream of ShutdownResponse messages.
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShutdownResponse], error)
}

type engineClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineClient(cc grpc.ClientConnInterface) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InitResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Engine_ServiceDesc.Streams[0], Engine_Init_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InitRequest, InitResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Engine_InitClient = grpc.ServerStreamingClient[InitResponse]

func (c *engineClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Engine_ServiceDesc.Streams[1], Engine_Run_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunRequest, RunResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Engine_RunClient = grpc.ServerStreamingClient[RunResponse]

func (c *engineClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShutdownResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Engine_ServiceDesc.Streams[2], Engine_Shutdown_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ShutdownRequest, ShutdownResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Engine_ShutdownClient = grpc.ServerStreamingClient[ShutdownResponse]

// EngineServer is the server API for Engine service.
// All implementations must embed UnimplementedEngineServer
// for forward compatibility.
type EngineServer interface {
	// Initializes the engine with the provided request parameters.
	// Returns a stream of InitResponse messages.
	Init(*InitRequest, grpc.ServerStreamingServer[InitResponse]) error
	// Runs a command with the provided request parameters.
	// Returns a stream of RunResponse messages.
	Run(*RunRequest, grpc.ServerStreamingServer[RunResponse]) error
	// Shuts down the engine with the provided request parameters.
	// Returns a stream of ShutdownResponse messages.
	Shutdown(*ShutdownRequest, grpc.ServerStreamingServer[ShutdownResponse]) error
	mustEmbedUnimplementedEngineServer()
}

// UnimplementedEngineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEngineServer struct{}

func (UnimplementedEngineServer) Init(*InitRequest, grpc.ServerStreamingServer[InitResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedEngineServer) Run(*RunRequest, grpc.ServerStreamingServer[RunResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedEngineServer) Shutdown(*ShutdownRequest, grpc.ServerStreamingServer[ShutdownResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedEngineServer) mustEmbedUnimplementedEngineServer() {}
func (UnimplementedEngineServer) testEmbeddedByValue()                {}

// UnsafeEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServer will
// result in compilation errors.
type UnsafeEngineServer interface {
	mustEmbedUnimplementedEngineServer()
}

func RegisterEngineServer(s grpc.ServiceRegistrar, srv EngineServer) {
	// If the following call pancis, it indicates UnimplementedEngineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Engine_ServiceDesc, srv)
}

func _Engine_Init_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineServer).Init(m, &grpc.GenericServerStream[InitRequest, InitResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Engine_InitServer = grpc.ServerStreamingServer[InitResponse]

func _Engine_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineServer).Run(m, &grpc.GenericServerStream[RunRequest, RunResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Engine_RunServer = grpc.ServerStreamingServer[RunResponse]

func _Engine_Shutdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShutdownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineServer).Shutdown(m, &grpc.GenericServerStream[ShutdownRequest, ShutdownResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Engine_ShutdownServer = grpc.ServerStreamingServer[ShutdownResponse]

// Engine_ServiceDesc is the grpc.ServiceDesc for Engine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Engine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Init",
			Handler:       _Engine_Init_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run",
			Handler:       _Engine_Run_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Shutdown",
			Handler:       _Engine_Shutdown_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/engine.proto",
}
