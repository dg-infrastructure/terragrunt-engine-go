// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: engine/engine.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandExecutorClient is the client API for CommandExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandExecutorClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (CommandExecutor_InitClient, error)
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (CommandExecutor_RunClient, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (CommandExecutor_ShutdownClient, error)
}

type commandExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandExecutorClient(cc grpc.ClientConnInterface) CommandExecutorClient {
	return &commandExecutorClient{cc}
}

func (c *commandExecutorClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (CommandExecutor_InitClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandExecutor_ServiceDesc.Streams[0], "/engine.CommandExecutor/Init", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandExecutorInitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommandExecutor_InitClient interface {
	Recv() (*InitResponse, error)
	grpc.ClientStream
}

type commandExecutorInitClient struct {
	grpc.ClientStream
}

func (x *commandExecutorInitClient) Recv() (*InitResponse, error) {
	m := new(InitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commandExecutorClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (CommandExecutor_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandExecutor_ServiceDesc.Streams[1], "/engine.CommandExecutor/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandExecutorRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommandExecutor_RunClient interface {
	Recv() (*RunResponse, error)
	grpc.ClientStream
}

type commandExecutorRunClient struct {
	grpc.ClientStream
}

func (x *commandExecutorRunClient) Recv() (*RunResponse, error) {
	m := new(RunResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commandExecutorClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (CommandExecutor_ShutdownClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandExecutor_ServiceDesc.Streams[2], "/engine.CommandExecutor/Shutdown", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandExecutorShutdownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommandExecutor_ShutdownClient interface {
	Recv() (*ShutdownResponse, error)
	grpc.ClientStream
}

type commandExecutorShutdownClient struct {
	grpc.ClientStream
}

func (x *commandExecutorShutdownClient) Recv() (*ShutdownResponse, error) {
	m := new(ShutdownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandExecutorServer is the server API for CommandExecutor service.
// All implementations must embed UnimplementedCommandExecutorServer
// for forward compatibility
type CommandExecutorServer interface {
	Init(*InitRequest, CommandExecutor_InitServer) error
	Run(*RunRequest, CommandExecutor_RunServer) error
	Shutdown(*ShutdownRequest, CommandExecutor_ShutdownServer) error
	mustEmbedUnimplementedCommandExecutorServer()
}

// UnimplementedCommandExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedCommandExecutorServer struct {
}

func (UnimplementedCommandExecutorServer) Init(*InitRequest, CommandExecutor_InitServer) error {
	return status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedCommandExecutorServer) Run(*RunRequest, CommandExecutor_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedCommandExecutorServer) Shutdown(*ShutdownRequest, CommandExecutor_ShutdownServer) error {
	return status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedCommandExecutorServer) mustEmbedUnimplementedCommandExecutorServer() {}

// UnsafeCommandExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandExecutorServer will
// result in compilation errors.
type UnsafeCommandExecutorServer interface {
	mustEmbedUnimplementedCommandExecutorServer()
}

func RegisterCommandExecutorServer(s grpc.ServiceRegistrar, srv CommandExecutorServer) {
	s.RegisterService(&CommandExecutor_ServiceDesc, srv)
}

func _CommandExecutor_Init_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandExecutorServer).Init(m, &commandExecutorInitServer{stream})
}

type CommandExecutor_InitServer interface {
	Send(*InitResponse) error
	grpc.ServerStream
}

type commandExecutorInitServer struct {
	grpc.ServerStream
}

func (x *commandExecutorInitServer) Send(m *InitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommandExecutor_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandExecutorServer).Run(m, &commandExecutorRunServer{stream})
}

type CommandExecutor_RunServer interface {
	Send(*RunResponse) error
	grpc.ServerStream
}

type commandExecutorRunServer struct {
	grpc.ServerStream
}

func (x *commandExecutorRunServer) Send(m *RunResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommandExecutor_Shutdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShutdownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandExecutorServer).Shutdown(m, &commandExecutorShutdownServer{stream})
}

type CommandExecutor_ShutdownServer interface {
	Send(*ShutdownResponse) error
	grpc.ServerStream
}

type commandExecutorShutdownServer struct {
	grpc.ServerStream
}

func (x *commandExecutorShutdownServer) Send(m *ShutdownResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CommandExecutor_ServiceDesc is the grpc.ServiceDesc for CommandExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.CommandExecutor",
	HandlerType: (*CommandExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Init",
			Handler:       _CommandExecutor_Init_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run",
			Handler:       _CommandExecutor_Run_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Shutdown",
			Handler:       _CommandExecutor_Shutdown_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "engine/engine.proto",
}
